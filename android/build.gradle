import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'dagger.hilt.android.plugin'
}
apply from: rootDir.path + '/release/signingRelease.gradle'
android {
    compileSdkVersion rootProject.androidCompileSdk as Integer
    buildToolsVersion rootProject.androidBuildTools
    defaultConfig {
        applicationId = 'id.ratabb.quran'
        minSdkVersion rootProject.androidMinSdk as Integer
        targetSdkVersion rootProject.androidTargetSdk as Integer
        versionCode 1
        versionName '1.0.0'
        dependenciesInfo.includeInApk = false
        resConfigs 'en','id', 'xxhdpi'
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
    }
    buildFeatures.buildConfig = true
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled = true
    }
    lintOptions {
        warningsAsErrors true
        abortOnError true
        checkTestSources false
        htmlReport false
        xmlReport false
        textReport true
        textOutput 'stdout'
        disable 'ObsoleteLintCustomCheck'
    }
    applicationVariants.all { variant ->
        if (variant.name ==~ /release/) {
            variant.outputs.all { output ->
                // TODO:
                def today = new Date()
                //
                def year = String.valueOf((new SimpleDateFormat("yy").format(today) as int) - 15)
                def dayInYear = String.format("%03d", (new SimpleDateFormat("D").format(today)) as int)
                def buildTime = year + dayInYear
                //
                def vName = rootProject.VERSION_NAME
                def c = vName.tokenize('.')*.toInteger()
                def vCode = c[0] * 10000000 + c[1] * 100000 + c[2] * 10000 + buildTime.toInteger()
                output.setVersionCodeOverride(vCode)
                output.setVersionNameOverride(vName + '-' + buildTime)
            }
        }
    }
    kotlinOptions {
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn']
    }
    packagingOptions {
        exclude 'kotlin/**'
        exclude '**/*.kotlin_metadata'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.version'
        exclude 'META-INF/*.properties'
        exclude 'androidsupportmultidexversion.txt'
        exclude 'DebugProbesKt.bin'
    }
    buildTypes {
        release {
            debuggable = false
            shrinkResources = true
            minifyEnabled = true
            zipAlignEnabled = true
            proguardFiles(getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-app.pro')
            signingConfig = signingConfigs.release
        }
    }
}
dependencies {
    implementation projects.itemsAndroid
    coreLibraryDesugaring libs.desugar
    add("kotlinCompilerPluginClasspath", libs.compose.compiler){
        because("Using jetpack-compose at AS 4.1")
    }
    implementation libs.accompanist.insets
    implementation libs.accompanist.systemuicontroller
    implementation libs.activity.activity
    implementation libs.activity.compose
    implementation libs.compose.foundation.foundation
    implementation libs.compose.foundation.layout
    implementation libs.compose.material.iconscore
    implementation libs.compose.material.material
    implementation libs.compose.runtime.livedata
    implementation libs.compose.runtime.runtime
    implementation libs.compose.ui.graphics
    implementation libs.compose.ui.text
    implementation libs.compose.ui.ui
    implementation libs.compose.ui.unit
    implementation libs.core.core
    implementation libs.coroutines.android
    implementation libs.coroutines.core.jvm
    implementation libs.customactivityoncrash
    implementation libs.dagger.dagger
    implementation libs.dagger.hilt.android
    implementation libs.dagger.hilt.core
    implementation libs.fragment.fragment
    implementation libs.hilt.lifecycle.viewmodel
    implementation libs.hilt.navigation.compose
    implementation libs.hilt.navigation.navigation
    implementation libs.javax.inject
    implementation libs.kotlin.stdlib.stdlib
    implementation libs.leakcanary.plumber.android
    implementation libs.lifecycle.livedata.core
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.lifecycle.viewmodel.savedstate
    implementation libs.lifecycle.viewmodel.viewmodel
    implementation libs.material.material
    implementation libs.navigation.common.common
    implementation libs.navigation.common.ktx
    implementation libs.navigation.compose
    implementation libs.navigation.runtime.runtime
    implementation libs.room.runtime
    implementation libs.serialization.json.json
    implementation libs.timber
    //
    kapt libs.dagger.hilt.compiler
    debugImplementation libs.leakcanary.android
    // UI Tests
    androidTestImplementation libs.compose.ui.testjunit4
}
